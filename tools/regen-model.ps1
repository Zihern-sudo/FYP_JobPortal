Param(
  [Parameter(Mandatory = $true)]
  [string]$Conn,
  [string]$ContextName = "AppDbContext"
)

$ErrorActionPreference = 'Stop'

# --- write as UTF-8 without BOM ---
$Utf8NoBom = New-Object System.Text.UTF8Encoding($false)

# Paths
$projRoot  = Resolve-Path "$PSScriptRoot\.."
$modelsDir = Join-Path $projRoot "Areas\Shared\Models"
$mergedFile = Join-Path $modelsDir "DB.cs"
$outCtx     = Join-Path $modelsDir "DbContext.cs"   # always DbContext.cs for consistency
$tempDir    = Join-Path $env:TEMP ("efscaffold_" + [guid]::NewGuid().ToString("N"))

Write-Host "== Regen models ======================================"
Write-Host "Project    : $projRoot"
Write-Host "Models Dir : $modelsDir"
Write-Host "Context    : $ContextName  (output file -> DbContext.cs)"
Write-Host "Connection : $Conn"
Write-Host "Temp Dir   : $tempDir"
Write-Host "======================================================"

# Ensure dirs
New-Item -ItemType Directory -Force -Path $modelsDir | Out-Null
New-Item -ItemType Directory -Force -Path $tempDir   | Out-Null

# Pre-build (helps ef tool load the assembly cleanly)
dotnet build $projRoot | Out-Null

# Scaffold into TEMP (not into your models dir)
dotnet ef dbcontext scaffold `
  "$Conn" Pomelo.EntityFrameworkCore.MySql `
  --context "$ContextName" `
  --output-dir "$tempDir" `
  --context-dir "$tempDir" `
  --use-database-names `
  --data-annotations `
  --no-onconfiguring `
  --force

# Find the context file in temp and move it as DbContext.cs
$ctxTemp = @(
  Join-Path $tempDir "$ContextName.cs"
  Join-Path $tempDir "DbContext.cs"
) | Where-Object { Test-Path $_ } | Select-Object -First 1

if (-not $ctxTemp) { throw "Scaffold did not produce a context file ($ContextName.cs or DbContext.cs) in $tempDir." }

# Normalize namespace inside the context and write to destination (preserve style/braces)
$ctxText = Get-Content $ctxTemp -Raw

# file-scoped:  namespace X.Y;
$ctxText = $ctxText -replace 'namespace\s+[^\s;{]+(?=\s*;)', 'namespace JobPortal.Areas.Shared.Models'
# block-scoped:  namespace X.Y {
$ctxText = $ctxText -replace 'namespace\s+[^\s{]+(?=\s*\{)', 'namespace JobPortal.Areas.Shared.Models'

[System.IO.File]::WriteAllText($outCtx, $ctxText, $Utf8NoBom)

# Start a fresh DB.cs with a single set of usings + one file-scoped namespace
$header = @"
// <auto-generated> Reverse-engineered $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")Z. Do not edit by hand. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;

namespace JobPortal.Areas.Shared.Models;
"@
[System.IO.File]::WriteAllText($mergedFile, $header, $Utf8NoBom)

# Collect entity files (all .cs under temp EXCEPT the context we already handled)
$entityFiles = Get-ChildItem $tempDir -File -Filter *.cs | Where-Object { $_.FullName -ne $ctxTemp }

# Helper: strip usings, #nullable, and ANY namespace line (file-scoped or block-start)
function Clean-EntityText([string]$text) {
  $t = $text -replace "(?m)^\s*using\s+.*?;\s*\r?\n", ""        # remove all using lines
  $t = $t -replace "(?m)^\s*#nullable\s+.*\r?\n", ""            # remove nullable pragmas
  $t = $t -replace "(?m)^\s*namespace\s+[^\s;{]+;\s*\r?\n", ""  # remove file-scoped namespace
  # Remove block-style namespace wrapper if present: 'namespace X { ... }'
  if ($t -match "^\s*namespace\s+[^\s{]+\s*\{") {
    $t = $t -replace "^\s*namespace\s+[^\s{]+\s*\{", ""         # remove opening
    $t = $t -replace "\}\s*\Z",""                               # remove single trailing closing brace
  }
  return ($t.Trim() + "`r`n`r`n")
}

foreach ($f in $entityFiles | Sort-Object Name) {
  [System.IO.File]::AppendAllText($mergedFile, " // ===== $($f.Name) =====`r`n", $Utf8NoBom)
  $clean = Clean-EntityText (Get-Content $f.FullName -Raw)
  [System.IO.File]::AppendAllText($mergedFile, $clean, $Utf8NoBom)
}

# OPTIONAL: keep your folder clean — remove stray per-entity files in models dir (leave DB.cs & DbContext.cs)
Get-ChildItem $modelsDir -File -Filter *.cs |
  Where-Object { $_.Name -notin @("DB.cs","DbContext.cs") } |
  Remove-Item -Force -ErrorAction SilentlyContinue

Write-Host "✅ Done. Wrote: $mergedFile and $outCtx"

# Cleanup temp
Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
